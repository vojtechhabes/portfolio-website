<!DOCTYPE html>
<html lang="cs">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CMS - Vojtěch Habeš</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
    />
    <link rel="stylesheet" href="/css/reset.css" />
    <link rel="stylesheet" href="/admin/css/style.css" />
  </head>
  <body>
    <main class="columns">
      <section class="projects">
        <a href="/admin/settings" class="button icon-only-transparent">
          <i class="material-symbols-rounded">settings</i>
        </a>

        <h2>Projekty</h2>

        <ul class="projectsList">
          <li>Načítání...</li>
        </ul>

        <form id="addProject">
          <input type="text" id="title" name="title" placeholder="Název" />
          <button type="submit" class="icon-only">
            <i class="material-symbols-rounded">add</i>
          </button>
        </form>
      </section>

      <section class="project">
        <h2>Úprava projektu</h2>

        <div class="forms">
          <form id="changeTitle">
            <fieldset disabled>
              <input type="text" id="title" name="title" placeholder="Název" />
              <button type="submit" class="icon-only">
                <i class="material-symbols-rounded">done</i>
              </button>
            </fieldset>
          </form>

          <form id="changeDescription">
            <fieldset disabled>
              <input
                type="text"
                id="description"
                name="description"
                placeholder="Popis"
              />
              <button type="submit" class="icon-only">
                <i class="material-symbols-rounded">done</i>
              </button>
            </fieldset>
          </form>

          <form id="changeContent">
            <fieldset disabled>
              <textarea
                id="content"
                name="content"
                placeholder="Obsah"
              ></textarea>
              <button type="submit" class="normal">
                <i class="material-symbols-rounded">done</i>
                Uložit obsah
              </button>
            </fieldset>
          </form>
        </div>
      </section>
    </main>

    <script src="/admin/js/notifications.js"></script>
    <script>
      const projectsList = document.querySelector(".projectsList");
      const addProjectForm = document.querySelector("#addProject");
      const project = document.querySelector(".project");
      const changeTitleForm = document.querySelector("#changeTitle");
      const changeDescriptionForm =
        document.querySelector("#changeDescription");
      const changeContentForm = document.querySelector("#changeContent");
      const deleteProject = document.querySelector("#deleteProject");
      const fieldsets = project.querySelectorAll(".project fieldset");

      let projectsArray = [];
      let currentProjectIndex = null;

      const updateCurrentProject = async (data) => {
        projectsArray[currentProjectIndex] = {
          ...projectsArray[currentProjectIndex],
          ...data,
        };

        const article =
          projectsList.querySelectorAll("article")[currentProjectIndex];
        article.querySelector("h3").textContent =
          projectsArray[currentProjectIndex].title;
        article.querySelector("p").textContent =
          projectsArray[currentProjectIndex].description || "Bez popisu";
      };

      const pushProject = async (project) => {
        projectsArray.push(project);
        setProjects(projectsArray);
        changeCurrentProject(projectsArray.length - 1);
      };

      const setProjects = (data) => {
        projectsArray = data;

        projectsList.innerHTML = projectsArray
          .map((project, index) => {
            return `<li>
              <article>
                <h3>${project.title}</h3>
                <p>${project.description || "Bez popisu"}</p>
                <button class="delete icon-only-transparent">
                  <i class="material-symbols-rounded">delete</i>
                </button>
              </article>
            </li>`;
          })
          .join("");

        projectsList.querySelectorAll("li").forEach((li, index) => {
          li.addEventListener("click", () => {
            changeCurrentProject(index);
          });

          li.querySelector("button").addEventListener(
            "click",
            async (event) => {
              event.stopPropagation();

              const password = prompt("Zadejte heslo pro smazání projektu");

              if (!password) {
                return;
              }

              const response = await fetch(
                `/api/project/${projectsArray[index]._id}`,
                {
                  method: "DELETE",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({ password }),
                }
              );
              const data = await response.json();

              if (!response.ok) {
                switch (data.code) {
                  case "incorrect-password":
                    createNotification("Zadali jste nesprávné heslo", "error");
                    break;
                  case "server-error":
                    createNotification("Nastala chyba na serveru", "error");
                    break;
                  default:
                    createNotification("Nastala neznámá chyba", "error");
                    break;
                }
                return;
              }

              createNotification("Projekt byl úspěšně smazán", "success");
              projectsArray.splice(index, 1);
              setProjects(projectsArray);
              changeCurrentProject(null);
            }
          );
        });
      };

      const changeCurrentProject = async (index) => {
        if (index !== null) {
          for (const fieldset of fieldsets) {
            fieldset.removeAttribute("disabled");
          }

          if (currentProjectIndex !== null) {
            projectsList
              .querySelectorAll("article")
              [currentProjectIndex].classList.remove("active");
          }
          projectsList
            .querySelectorAll("article")
            [index].classList.add("active");
          currentProjectIndex = index;

          changeTitleForm.querySelector("#title").value =
            projectsArray[index].title || "";
          changeDescriptionForm.querySelector("#description").value =
            projectsArray[index].description || "";
          changeContentForm.querySelector("#content").value =
            projectsArray[index].content || "";
        } else {
          for (const fieldset of fieldsets) {
            fieldset.setAttribute("disabled", "");
          }

          if (currentProjectIndex !== null) {
            try {
              projectsList
                .querySelectorAll("article")
                [currentProjectIndex].classList.remove("active");
            } catch (error) {
              // Do nothing because the project was deleted
            }
          }
          currentProjectIndex = null;

          changeTitleForm.querySelector("#title").value = "";
          changeDescriptionForm.querySelector("#description").value = "";
          changeContentForm.querySelector("#content").value = "";
        }
      };

      const loadProjects = async () => {
        const response = await fetch("/api/project");
        const data = await response.json();

        if (!response.ok) {
          alert("Nastala chyba při načítání projektů");
          return;
        }

        setProjects(data.projects);
      };

      loadProjects();

      addProjectForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const title = addProjectForm.querySelector("#title").value;

        const response = await fetch("/api/project", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ title }),
        });
        const data = await response.json();

        if (!response.ok) {
          createNotification("Nastala chyba při vytváření projektu", "error");
          return;
        }

        createNotification("Projekt byl úspěšně vytvořen", "success");
        pushProject(data.project);
        addProjectForm.querySelector("#title").value = "";
      });

      changeTitleForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const title = changeTitleForm.querySelector("#title").value;

        const response = await fetch(
          `/api/project/${projectsArray[currentProjectIndex]._id}`,
          {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ title }),
          }
        );
        const data = await response.json();

        if (!response.ok) {
          createNotification("Nastala chyba při změně názvu projektu", "error");
          return;
        }

        createNotification("Název projektu byl uložen", "success");
        updateCurrentProject({ title });
      });

      changeDescriptionForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const description =
          changeDescriptionForm.querySelector("#description").value;

        const response = await fetch(
          `/api/project/${projectsArray[currentProjectIndex]._id}`,
          {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ description }),
          }
        );
        const data = await response.json();

        if (!response.ok) {
          createNotification(
            "Nastala chyba při změně popisu projektu",
            "error"
          );
          return;
        }

        createNotification("Popis projektu byl uložen", "success");
        updateCurrentProject({ description });
      });

      changeContentForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const content = changeContentForm.querySelector("#content").value;

        const response = await fetch(
          `/api/project/${projectsArray[currentProjectIndex]._id}`,
          {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ content }),
          }
        );
        const data = await response.json();

        if (!response.ok) {
          createNotification(
            "Nastala chyba při změně obsahu projektu",
            "error"
          );
          return;
        }

        createNotification("Obsah projektu byl uložen", "success");
        updateCurrentProject({ content });
      });
    </script>
  </body>
</html>
